%{
    SCRIPT FILE TO CALL GATOOLBOX FROM COMMAND WINDOW (TO SOLVE nQueensFitness)
    Added code for bookkeeping
    AUTHOR: PHELAN VENDEVILLE
%} 

%master variables to store data from all 10 runs (stored in cells)
master_Mchanges = cell(1,10);
master_Cchanges = cell(1,10);
%note that because we are recording initial values, each cell will contain
%   generations+1 values for the columns.
master_meanPopFitness = cell(1,10);
master_stdPopFitness = cell(1,10);

%experiment-specific variables
maxgens = 100;
numberOfQueens = 16;
popsize = 100;

%options for the ga options. These indicate a custom data type being used
options = gaoptimset('PopulationType', 'custom', 'PopInitRange', [1;numberOfQueens]);

% Specify options for the GA toolbox
myoptions=gaoptimset(options, 'CreationFcn', @nQueensPermutationProducer,...
                    'SelectionFcn',{@selectiontournament,3},... % Tournament size of 3 to pick best 1 of 3 as a parent
                    'CrossoverFcn',@nQueensCrossover,...
                    'MutationFcn', @nQueensMutate,...
                    'PopulationSize', popsize,...
                    'StallGenLimit', 100,...
                    'Vectorized','on',...
                    'EliteCount', 0,...
                    'FitnessLimit',0,...
                    'CrossoverFraction', .5,...
                    'OutputFcns',@nQueensOutputFcn,...
                    'Generations', maxgens);

%global bookeeping variables 
global Mchanges;
global Cchanges;

%{ 
   Run the GA on an 16 variable fitness function with the options you've set
   Perform this run 10 times, performing bookkeeping and updating master
   variables each iteration.
%}
for seed = 1:10
    rand('seed', seed);
    Mchanges = NaN(popsize/2, maxgens);%mutation changes
    Cchanges = NaN(popsize/2, maxgens);%crossover changes
    ga(@nQueensFitness, numberOfQueens, myoptions);
    genstats = nQueensOutputFcn;
    
    %update master variables
    master_Mchanges{1,seed} = Mchanges;
    master_Cchanges{1,seed} = Cchanges;
    master_meanPopFitness{1,seed} = genstats.AvgScore;
    master_stdPopFitness{1,seed} = genstats.StandardDev;
end

%{ *** perform plotting *** }%
%Plot of mean population fitness (y-axis) as a function of generations (x-axis), using different lines for the 10 different runs
cc=hsv(12);
figure;
hold on;
for i=1:10
    plot( master_meanPopFitness{1,i},'color',cc(i,:),'LineWidth',1);
end
set(gca,'Fontsize',12);
title('N-Queens mean pop. fitness vs generations')
xlabel('Generation')
ylabel('Mean population fitness')
legend('Run 1', 'Run 2', 'Run 3', 'Run 4', 'Run 5', 'Run 6', 'Run 7', 'Run 8', 'Run 9', 'Run 10') 

%plot of std of population fitness (y) vs generations (x), using different lines for the 10 different runs
cc=hsv(12);
figure; 
hold on;
for i=1:10
    plot( master_stdPopFitness{1,i},'color',cc(i,:),'LineWidth',1);
end
set(gca,'Fontsize',12);
title('N-Queens STD pop. fitness vs generations')
xlabel('Generation')
ylabel('Standard Deviation of population fitness')
legend('Run 1', 'Run 2', 'Run 3', 'Run 4', 'Run 5', 'Run 6', 'Run 7', 'Run 8', 'Run 9', 'Run 10')

%plot of the mean fitness change caused by mutations(y-axis) as a function of generations (x-axis), using different lines for the 10 different runs
%calculate the mean change in fitness for every generation a mutation occurred. 



%plot of the mean fitness change caused by crossover(y) vs generations(x),using different lines for the 10 different runs

%scatter plot of all fitness changes (both bad and good, from all 10 runs lumped together) caused by mutation (y) vs the corresponding standard deviation of the population before the mutation (x)

%scatter plot of all fitness changes (both bad and good, from all 10 runs lumped together) caused by crossover (y) vs the corresponding standard deviation of the population before the crossover (x)